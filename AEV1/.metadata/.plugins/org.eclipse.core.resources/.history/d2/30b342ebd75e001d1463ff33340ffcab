package florida;

import javax.swing.JOptionPane;

/**
 * Clase Procesadora
 * 
 * @author lopez
 *
 */
public class Procesadora implements Runnable {

	public int indice;
	public double limite;
	public String nombre;
	/**
	 * Array utilizado para cada tipo de tiempo de creacion de cada croqueta
	 */
	public static Integer tiempoEspera[];
	/**
	 * Array utilizado para cada nombre de los cuatro tipos de croquetas
	 */
	public static String croquetas_nombres[];
	/**
	 * Array utilizado para la cantidad de croquetas que introduce el usuario
	 */
	public static Integer croquetas_cantidades[];
	/**
	 * Variable utilizada para la cantidad de croquetas que hay creadas
	 */
	public static int contador = 0;
	/**
	 * Variable utilizada para saber cuantas croquetas han terminado su ejecucion
	 */
	public static int terminadas = 0;
	/**
	 * Variable utilizada para saber cuantas croquetas estan en proceso
	 */
	public static int proceso;
	/**
	 * Thread que ejecuta todos los hilos mediante un bucle for
	 */
	public Thread hilo;
	/**
	 * Variable utilizada para saber el fin del tiempo de ejecucion
	 */
	public static long fin = 0;
	/**
	 * Variable utilizada para saber el inicio del tiempo de ejecucion
	 */
	public static long inicio = 0;

	/**
	 * Constructor de la clase Procesadora con los argumentos limite, nombre e
	 * indice
	 * 
	 * @param limite El parametro limite es el tiempo que tarda en crear la croqueta
	 *               de ese tipo
	 * @param nombre El parametro que indica de que tipo es la croqueta
	 * @param indice El parametro indica el indice para saber en que posicion esta
	 *               la croqueta en cada momento
	 */
	Procesadora(Integer limite, String nombre, Integer indice) {
		this.limite = limite;
		this.nombre = nombre;
		this.indice = indice;

	}

	/**
	 * El metodo lanzar croqueta recoge de lanzadora todos los argumentos e inicia
	 * la ejecucion de hilos por cada una de ellas
	 * 
	 * @param croquetasJamon   Hace referencia a la cantidad que ha introducido el
	 *                         usuario de este tipo de croqueta
	 * @param croquetasPollo
	 * @param CroquetasBacalao
	 * @param CroquetasQueso
	 * @param PrioridadJamon   Hace referencia a la prioridad que ha introducido el
	 *                         usuario de este tipo de croqueta
	 * @param PrioridadPollo
	 * @param PrioridadBacalao
	 * @param PrioridadQueso
	 * @throws InterruptedException El error hace referencia a cuando el subproceso
	 *                              esta esperando u ocupado
	 */
	public static void lanzarCroquetas(Integer croquetasJamon, Integer croquetasPollo, Integer CroquetasBacalao,
			Integer CroquetasQueso, Integer PrioridadJamon, Integer PrioridadPollo, Integer PrioridadBacalao,
			Integer PrioridadQueso) throws InterruptedException {
		/**
		 * Desde aqui empezamos a contar lo que tarda la aplicacion en terminar
		 */
		inicio = System.currentTimeMillis();

		Thread hilo1;
		/**
		 * Cada indice de los 4 arrays estan relacionados entre si por su posicion
		 */
		croquetas_cantidades = new Integer[] { croquetasJamon, croquetasPollo, CroquetasBacalao, CroquetasQueso };
		croquetas_nombres = new String[] { "Jamón", "Pollo", "Bacalao", "Queso" };
		tiempoEspera = new Integer[] { 5000, 6000, 7000, 8000 };
		int[] prioridad = { PrioridadJamon, PrioridadPollo, PrioridadBacalao, PrioridadQueso };
		/**
		 * Bucle for anidado para que itere por cada tipo de croqueta(4) las cantidades
		 * que introduce el usuario(m), su variable contador interno cuenta las
		 * croquetas que se fabrican
		 */
		for (int i = 0; i < croquetas_nombres.length; i++) {
			for (int j = 0; j < croquetas_cantidades[i]; j++) {
				contador++;
				Procesadora procesadora1 = new Procesadora(tiempoEspera[i], croquetas_nombres[i], contador);
				Thread.sleep(5);
				hilo1 = new Thread(procesadora1);
				hilo1.setPriority(prioridad[i]);
				hilo1.start();

			}
		}

	}

	/**
	 * Run es encargado de fabricar las croquetas y parar cuando llegan a cien,
	 * cuando llega todas las demas las ponemos en (sleep) tres segundos, cuando
	 * trascurre el tiempo volvemos a comprobar cuantas estan en proceso de
	 * fabricacion (semaforo)
	 */
	@Override
	public void run() {

		boolean verificacion = true;
		double avance = 0, porcentaje = 0;

		while (true) {
			proceso = contador - terminadas;
			if (verificacion == true) {
				if (proceso <= 100) {
					System.out.println("La croqueta de " + nombre + " Nº " + indice + " se ha comenzado a fabricar");
					break;
				} else {
					synchronized (this) {
						verificacion = false;
						notify();
					}
				}
			}

			else if (verificacion == false) {
				System.err.println("La lanzadora se ha detenido 3 segundos");
				System.err.println("La croqueta de " + nombre + " Nº " + indice + " esta en pausa");
				try {
					synchronized (this) {
						Thread.sleep(3000);
						verificacion = true;
						notify();
					}
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

			}
		}
		/**
		 * Bucle encargado de mostrar por consola el avance de cada croqueta, respentado
		 * su tiempo de fabricacion individual
		 */
		while (avance < limite) {

			avance = avance + 500;
			porcentaje = 100 * avance / limite;
			System.out
					.println("La croqueta de " + nombre + " " + "está al " + String.format("(%.0f", porcentaje) + "%)");
			if (porcentaje == 100.0) {
				terminadas++;
				System.out.println("La croqueta de " + nombre + " Nº " + terminadas + " ha terminado su ejecución");
			}
			try {
				Thread.sleep(500);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}

			fin = System.currentTimeMillis();

		}

		/**
		 * Condicional encargado de que cuando terminen todas muestre el tiempo que se
		 * ha tardado en fabricarlas
		 */
		if (terminadas == contador) {
			double tiempo = (double) ((fin - inicio) / 1000);
			JOptionPane.showMessageDialog(null, "La aplicación ha tardado en terminar: " + tiempo + " segundos",
					"Tiempo ejecucion", JOptionPane.INFORMATION_MESSAGE);
			System.exit(contador);

		}

	}
}
