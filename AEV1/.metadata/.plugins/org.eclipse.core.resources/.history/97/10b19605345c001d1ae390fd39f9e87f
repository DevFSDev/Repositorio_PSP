package florida;
import javax.swing.JOptionPane;

public class Procesadora implements Runnable {

	public int indice;
	public double limite;
	public String nombre;
	public static Integer tiempoEspera[];
	public static String croquetas_nombres[];
	public static Integer croquetas_cantidades[];
	public static int contador = 0;
	public static int terminadas = 0;
	public static int proceso;
	public Thread hilo;
	public static long fin = 0; // Tiempo ejecución
	public static long inicio = 0; // Tiempo ejecución



	Procesadora(Integer limite, String nombre, Integer indice) {
		this.limite = limite;
		this.nombre = nombre;
		this.indice = indice;

	}

	public static void lanzarCroquetas(Integer croquetasJamon, Integer croquetasPollo, Integer CroquetasBacalao,
			Integer CroquetasQueso, Integer PrioridadJamon, Integer PrioridadPollo, Integer PrioridadBacalao,
			Integer PrioridadQueso) throws InterruptedException {

		inicio = System.currentTimeMillis();

		Thread hilo1;

		croquetas_cantidades = new Integer[] { croquetasJamon, croquetasPollo, CroquetasBacalao, CroquetasQueso };
		croquetas_nombres = new String[] { "Jamón", "Pollo", "Bacalao", "Queso" };
		tiempoEspera = new Integer[] { 5000, 6000, 7000, 800 };
		int[] prioridad ={ PrioridadJamon, PrioridadPollo, PrioridadBacalao, PrioridadQueso };

		for (int i = 0; i < croquetas_nombres.length; i++) {
			for (int j = 0; j < croquetas_cantidades[i]; j++) {
				contador++;
				Procesadora procesadora1 = new Procesadora(tiempoEspera[i], croquetas_nombres[i], contador);
				Thread.sleep(5);
				hilo1 = new Thread(procesadora1);
				hilo1.setPriority(prioridad[i]);
				hilo1.start();


			}
		}

	}

	@Override
	public void run() {
		boolean verificacion = true;
		double avance = 0, porcentaje = 0;
			
		while(true) {
			proceso = contador - terminadas;
			if (verificacion == true) {
				if(proceso <= 100) {
					System.out.println("La croqueta de " + nombre + " Nº " + indice + " se ha comenzado a fabricar");
					break;
				}else {
					synchronized (this) {
						verificacion = false;
						notify();
					} 
				}
			} 
			
			else if(verificacion == false){
				System.err.println("La croqueta de " + nombre + " Nº " + indice + " esta en pausa");
				try {
					System.err.println("La lanzadora se ha detenido 3 segundos");
					Thread.sleep(300);
					synchronized (this) {
						verificacion = true;
						notify();
					}
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

			}
	}

		while (avance < limite) {

			avance = avance + 500;
			porcentaje = 100 * avance / limite;
			System.out.println("La croqueta de " + nombre + " " + "está al " + String.format("(%.0f", porcentaje) + "%)");
			if (porcentaje == 100.0) {
				terminadas++;
				System.out.println("La croqueta de " + nombre + " Nº " + terminadas + " ha terminado su ejecución");
			}
			try {
				Thread.sleep(500);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}

			fin = System.currentTimeMillis();

		}
		System.out.println(terminadas);
		System.out.println(contador);
		
		if (terminadas == contador) {
			double tiempo = (double) ((fin - inicio) / 1000);
			JOptionPane.showMessageDialog(null, "La aplicación ha tardado en terminar: " + tiempo + " segundos",
					"Tiempo ejecucion", JOptionPane.INFORMATION_MESSAGE);
			System.exit(contador);

		}

	}
}
